" Title: .vimrc
" Author: Vincevrp | github.com/Vincevrp

" Vundle setup {{{
set nocompatible
filetype off
set viminfo+=n~/.vim/viminfo
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" }}}

" Plugins {{{
Plugin 'VundleVim/Vundle.vim'
Plugin 'arcticicestudio/nord-vim'
Plugin 'vim-airline/vim-airline'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-surround'
Plugin 'easymotion/vim-easymotion'
Plugin 'scrooloose/nerdtree'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'scrooloose/syntastic'
Plugin 'Valloric/YouCompleteMe'

" Markdown plugins
Plugin 'shime/vim-livedown'
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'
Plugin 'junegunn/vim-easy-align'

" LaTeX
Plugin 'LaTeX-Box-Team/LaTeX-Box'

" Emmet + CSS3 and SASS Syntax support
Plugin 'mattn/emmet-vim'
Plugin 'hail2u/vim-css3-syntax'
Plugin 'gcorne/vim-sass-lint'
Plugin 'cakebaker/scss-syntax.vim'

" EJS Syntax
Plugin 'nikvdp/ejs-syntax'

" I3 config syntax
Plugin 'PotatoesMaster/i3-vim-syntax'

" All plugins must be added before the following line
call vundle#end()
filetype plugin indent on
" }}}

" Vim behaviour {{{
set tabstop=4                       " Number of spaces a tab counts for
set softtabstop=4                   " Set columns to 0 for tabs
set expandtab                       " Use tab character instead of spaces
set shiftwidth=4                    " Make indent correspond to single tab
set smarttab                        " Enable smarttab
set number relativenumber           " Enable relative line numbers
set ignorecase                      " Ignore case when searching
set smartcase                       " Ignore case if search is all lowercase, case-sensitive otherwise
set hlsearch                        " Highlight search terms
set incsearch                       " Show search matches as you type
set showmatch                       " Show matching parenthesis
set mouse=a                         " Enable mouse input
set timeoutlen=1001                 " Set mapping delay (Escape delay fix)
set ttimeoutlen=0                   " Set key code delay (Escape delay fix)
set encoding=utf-8                  " Enable UTF-8
set t_Co=256                        " Enable 256 color support
set showcmd                         " Show command while typing
set conceallevel=2                  " Enable concealing
set foldmethod=marker               " Enable folding
set wrap                            " Enable visual word wrap
set linebreak                       " Only wrap at breakat characters
set breakindent                     " Indent breaks
set showbreak=↪\                    " Display ↪\ in front of wrapped lines
set splitbelow                      " Open horizontal split below
set cursorline                      " Highlight current line
set nrformats-=octal                " Remove octal numbers from increment
" }}}

" Other settings {{{

" Enable syntax highlighting
syntax on

" Change indentation based on filetype
autocmd FileType yaml setlocal shiftwidth=2 softtabstop=2 tabstop=2
autocmd Filetype ruby setlocal shiftwidth=2 softtabstop=2 tabstop=2

" Highlight trailing whitespace and TAB characters
highlight ExtraWhitespace ctermbg=red guibg=red
autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()
" }}}

" Colorscheme and font {{{
colorscheme nord
let g:airline_powerline_fonts=1
set guifont=Hack-regular
" }}}

" Custom commands and functions {{{

" Write as sudo
command W execute ":w !sudo tee %"

" Convert to unix line ending
function DOS2Unix()
    edit ++ff=unix
    %s///g
endfun

" Ranger file explorer
function Ranger()
    let l:file = "/tmp/vim-ranger"
    exec "silent !ranger --choosefile=".l:file
    if filereadable(l:file)
        exec 'edit'.system('<'.l:file.'&& rm '.l:file)
    endif
    redraw!
endfun
" }}}

" Custom keybindings {{{
nnoremap <silent> <F1> :NERDTreeToggle<CR>
nnoremap <silent> <A-e> :SyntasticCheck<CR>
nnoremap <silent> <M-r> :SyntasticReset<CR>
nnoremap <silent> <S-l> :noh<CR>

nnoremap <silent> <A-h> <C-W>h
nnoremap <silent> <A-j> <C-W>j
nnoremap <silent> <A-k> <C-W>k
nnoremap <silent> <A-l> <C-W>l

nnoremap <silent> <Tab> :tabn<CR>
nnoremap <silent> <S-Tab> :tabp<CR>
nnoremap <silent> <C-n> :tabe<CR>
nnoremap <silent> <C-c> :bw<CR>
noremap <silent> <C-s> :%s/\s\+$//e<CR>
nnoremap <silent> <C-q> :shell<CR>
nnoremap <silent> <C-e> 2<C-e>
nnoremap <silent> <C-y> 2<C-y>

inoremap <C-Space> <C-x><C-o>

" Fix for macro's using ESC
inoremap <Esc> <C-c>
inoremap <C-s> <Esc>ddi

noremap <silent> <F2> :set nospell<CR>
noremap <silent> <F3> :set spell spelllang=en_us<CR>
noremap <silent> <F4> :set spell spelllang=nl<CR>
noremap <silent> <F5> :call Ranger()<CR>
noremap <silent> <F6> :call DOS2Unix()<CR>

autocmd FileType tex  nnoremap <silent> <A-p> :!mupdf %:r.pdf &<CR><CR>
autocmd FileType tex  nnoremap <silent> <A-c> :!pdflatex %<CR><CR>
autocmd FileType markdown nnoremap <silent> <A-p> :LivedownToggle<CR>
autocmd FileType markdown vmap <A-t> :EasyAlign*<Bar><Enter>

" Fix for Alt-keybindings
let c='a'
while c <= 'z'
    exec "set <A-".c.">=\e".c
    exec "imap \e".c." <A-".c.">"
    let c=nr2char(1+char2nr(c))
endw
" }}}

" Markdown settings {{{
autocmd FileType markdown set foldmethod=expr
let g:vim_markdown_folding_style_pythonic=1
let g:vim_markdown_frontmatter=1

" Livedown settings
let g:livedown_autorun=0
let g:livedown_open=1
let g:livedown_port=4444
let g:livedown_browser="chromium"
" }}}

" Easymotion settings {{{
let g:EasyMotion_do_mapping=0
map <Space> <Plug>(easymotion-bd-w)
" }}}

" NERDTree settings {{{
let NERDTreeShowHidden=1 " Use Shift + i to toggle
let NERDTreeMapOpenVSplit='v'
let NERDTreeMapOpenSplit='h'
let NERDTreeMapOpenInTab='t'
" }}}

" CtrlP settings {{{
let g:ctrlp_show_hidden=1
let g:ctrlp_clear_cache_on_exit=0
let g:ctrlp_prompt_mappings = {
    \ 'AcceptSelection("v")': ['<c-v>'],
    \ 'AcceptSelection("h")': ['<c-h>'],
    \ 'AcceptSelection("t")': ['<c-t>'],
\ }
" }}}

" Emmet {{{
let g:user_emmet_leader_key='<C-h>'
" }}}

" Syntastic settings {{{
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list=1
let g:syntastic_auto_loc_list=1
let g:syntastic_check_on_open=1
let g:syntastic_check_on_wq=0

let g:syntastic_sass_checkers=["sasslint"]
let g:syntastic_scss_checkers=["sasslint"]
 " }}}
