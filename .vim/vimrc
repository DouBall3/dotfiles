" Title: .vimrc
" Author: Vincevrp | github.com/Vincevrp

" Initial setup {{{
set nocompatible
set viminfo+=n~/.vim/viminfo
" }}}

" Plugins {{{
call plug#begin('~/.vim/plugged')
" Essential
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'easymotion/vim-easymotion'
Plug 'junegunn/fzf.vim'

" Looks
Plug 'arcticicestudio/nord-vim'
Plug 'itchyny/lightline.vim'
Plug 'maximbaz/lightline-ale'
Plug 'maximbaz/lightline-trailing-whitespace'

" Tools
Plug 'w0rp/ale'
Plug 'Valloric/YouCompleteMe', { 'do': './install.py' }
Plug 'mattn/emmet-vim'
Plug 'scrooloose/nerdcommenter'
Plug 'junegunn/goyo.vim'
Plug 'takac/vim-hardtime'

" Formatting
Plug 'godlygeek/tabular'
Plug 'junegunn/vim-easy-align'

" Markdown
Plug 'plasticboy/vim-markdown'
Plug 'shime/vim-livedown', { 'do': 'sudo npm install -g livedown' }

" LaTeX
Plug 'lervag/vimtex'

" Syntax
Plug 'PotatoesMaster/i3-vim-syntax'
Plug 'cakebaker/scss-syntax.vim'
Plug 'hail2u/vim-css3-syntax'
Plug 'nikvdp/ejs-syntax'
call plug#end()
" }}}

" Vim behaviour {{{
set expandtab                       " Expand tab character to spaces
set softtabstop=4                   " Set columns to 0 for tabs
set shiftwidth=4                    " Make indent correspond to 4 spaces
set smarttab                        " Enable smarttab
set number relativenumber           " Enable relative line numbers
set ignorecase                      " Ignore case when searching
set smartcase                       " Ignore case if search is all lowercase, case-sensitive otherwise
set hlsearch                        " Highlight search terms
set incsearch                       " Show search matches as you type
set scrolloff=10                    " Number of lines to keep above and below cursor
set showmatch                       " Show matching parenthesis
set mouse=                          " Mouse input (empty=disabled)
set timeoutlen=1000                 " Set mapping delay (Escape delay fix)
set ttimeoutlen=0                   " Set key code delay (Escape delay fix)
set encoding=utf-8                  " Enable UTF-8
set t_Co=256                        " Enable 256 color support
set showcmd                         " Show command while typing
set conceallevel=2                  " Enable concealing
set foldmethod=marker               " Enable folding
set wrap                            " Enable visual word wrap
set linebreak                       " Only wrap at breakat characters
set breakindent                     " Indent breaks
set showbreak=↪\                    " Display ↪\ in front of wrapped lines
set splitbelow                      " Open horizontal split below
set cursorline                      " Highlight current line
set nrformats-=octal                " Remove octal numbers from increment
set wildmenu                        " Show wildmenu when using tab completion
set laststatus=2                    " Enable statusline
set noshowmode                      " Disable default mode indicator
set autochdir                       " Automatically change working directory
set undofile                        " Enable persistent undo
set undodir=~/.vim/undodir          " Set undodir
" }}}

" Other settings {{{

" Enable syntax highlighting
syntax on

" Open help in new tab
cabbrev help tab help

" Change indentation based on filetype
autocmd FileType yaml,ruby,html,css,sass,scss setlocal shiftwidth=2 softtabstop=2 tabstop=2

" Highlight trailing whitespace and TAB characters
highlight ExtraWhitespace ctermbg=red guibg=red
autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()
" }}}

" Colorscheme and font {{{
let g:nord_italic=1
let g:nord_italic_comments=1
let g:nord_uniform_diff_background=1

set guifont=Hack-regular

colorscheme nord
" }}}

" Custom commands and functions {{{

" Write as sudo
command! W execute ":w !sudo tee %"

" Convert to unix line ending
function DOS2Unix()
    edit ++ff=unix
    %s///g
endfun

" Ranger file explorer
function Ranger()
    let l:file = "/tmp/vim-ranger"
    exec "silent !ranger --choosefile=".l:file
    if filereadable(l:file)
        exec 'edit'.system('<'.l:file.'&& rm '.l:file)
    endif
    redraw!
endfun

" Use appropriae FZF function
function CheckFZF()
    execute system('git rev-parse --is-inside-work-tree') =~ 'true' ? 'GFiles' : 'Files'
endfun

" Toggle 80 column width highlight
let s:columnwidth = 0
function! ToggleWidthHighlight()
    if s:columnwidth == 0
        let s:columnwidth = 1
        match WarningMsg '\%>80v.\+'
    else
        let s:columnwidth = 0
        match none
    endif
endfunction
" }}}

" Custom keybindings {{{
let mapleader=","

" Add J and K motions to jumplist
nnoremap <expr> k (v:count > 1 ? "m'" . v:count : '') . 'k'
nnoremap <expr> j (v:count > 1 ? "m'" . v:count : '') . 'j'

" Ctrl-keybindings
nnoremap <silent> <C-e> 2<C-e>
nnoremap <silent> <C-y> 2<C-y>
nnoremap <silent> <C-s> :%s/\s\+$//e<CR>
nnoremap <silent> <C-m>  :noh<CR>
nnoremap <silent> <C-p> :call CheckFZF()<cr>

" Leader-keybindings
nnoremap <silent> <leader>q :terminal<CR>
nnoremap <silent> <leader>s :shell<CR>
nnoremap <silent> <leader>r :call Ranger()<CR>
nnoremap <silent> <leader><S-r> :so ~/.vim/vimrc<CR>
nnoremap <silent> <leader>f :Ex<CR>
nnoremap <silent> <leader>x :call system('xclip -selection clipboard', @0)<CR>
nnoremap <silent> <leader>g :Goyo<CR>
nnoremap <silent> <leader>w :call ToggleWidthHighlight()<CR>

nnoremap <silent> <leader>e :copen<CR>
nnoremap <silent> <leader><S-e> :cclose<CR>
nnoremap <silent> <leader><S-n> :cp<CR>
nnoremap <silent> <leader>n :cn<CR>
nnoremap <silent> <leader><C-p> :Files<cr>

" Insert mode keybindings
inoremap <C-Space> <C-x><C-o>

" Window and buffer management
nnoremap <silent> <C-h> <C-W>h
nnoremap <silent> <C-j> <C-W>j
nnoremap <silent> <C-k> <C-W>k
nnoremap <silent> <C-l> <C-W>l

nnoremap <silent> <C-b> :tabn<CR>
nnoremap <silent> <C-n> :tabe<CR>
nnoremap <silent> <S-x> :bw<CR>

nnoremap <silent> <leader><leader> <C-^>
nnoremap <silent> <leader>h :new<CR>
nnoremap <silent> <leader>v :vnew<CR>
nnoremap <silent> <leader>d :bd<CR>
nnoremap <silent> <leader>l :Buffers<CR>

" F-keys
nnoremap <silent> <F1> :set nospell<CR>
nnoremap <silent> <F2> :set spell spelllang=en_us<CR>
nnoremap <silent> <F3> :set spell spelllang=nl<CR>
nnoremap <silent> <F4> :call DOS2Unix()<CR>

" Filetype specific
autocmd FileType tex      nnoremap <silent> <leader>c :VimtexCompile<CR>
autocmd FileType tex      nnoremap <silent> <leader>p :VimtexView<CR>
autocmd FileType html     nnoremap <silent> <leader>p :!firefox %<CR><CR>
autocmd FileType markdown nnoremap <silent> <leader>p :LivedownToggle<CR>
autocmd FileType markdown vmap     <silent> <leader>t :EasyAlign*<Bar><Enter>
" }}}

" Markdown settings {{{
autocmd FileType markdown set foldmethod=expr
let g:vim_markdown_folding_style_pythonic=1
let g:vim_markdown_frontmatter=1
let g:vim_markdown_new_list_item_indent = 0

" Livedown settings
let g:livedown_autorun=0
let g:livedown_open=1
let g:livedown_port=4444
let g:livedown_browser="firefox"
" }}}

" VimTex settings {{{
let g:vimtex_view_method = 'mupdf'
if !exists('g:ycm_semantic_triggers')
    let g:ycm_semantic_triggers = {}
endif
let g:ycm_semantic_triggers.tex = g:vimtex#re#youcompleteme
" }}}

" Easymotion settings {{{
let g:EasyMotion_do_mapping=0
map <Space> <Plug>(easymotion-bd-w)
" }}}

" Netrw settings {{{
let g:netrw_liststyle = 3
let g:netrw_banner = 0
let g:netrw_winsize = 25
" }}}

" FZF settings {{{
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-h': 'split',
  \ 'ctrl-v': 'vsplit' }
" }}}

" Emmet {{{
let g:user_emmet_leader_key='<leader>H'
" }}}

" ALE Settings {{{
let g:ale_completion_enabled = 0
let g:ale_lint_on_text_changed="normal"
let g:ale_set_loclist = 0
let g:ale_set_quickfix = 1
" }}}

" Hardtime {{{
let g:hardtime_default_on = 1
let g:hardtime_timeout = 500
" }}}

